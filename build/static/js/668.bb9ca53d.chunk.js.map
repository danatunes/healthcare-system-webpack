{"version":3,"file":"static/js/668.bb9ca53d.chunk.js","mappings":"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","sources":["components/admin-blocks/AdminBlocks.jsx","../node_modules/@heroicons/react/outline/esm/HomeIcon.js","pages/admin/admin-clinic/admin-add-clinic.jsx","ui/datalist/datalist.jsx"],"sourcesContent":["import { Button } from \"../../ui/button/button\";\n\nexport const Block = ({\n  heading1,\n  heading1Content,\n  heading2,\n  heading2Content,\n  heading3,\n  heading3Content,\n}) => {\n  return (\n    <div className=\"flex flex-row justify-between items-center py-2 px-4 h-[65px] rounded-xl bg-white my-2 mx-4\">\n      <div className=\"flex flex-row space-x-8\">\n        <TextBlock fieldHeader={heading1} content={heading1Content} />\n        <TextBlock fieldHeader={heading2} content={heading2Content} />\n        {heading3 && (\n          <TextBlock fieldHeader={heading3} content={heading3Content} />\n        )}\n      </div>\n      <div className=\"space-x-4\">\n        <Button name=\"Edit\" style=\"w-20 rounded-3xl\tbg-blue\" />\n        <Button name=\"Delete\" style=\"w-20 rounded-3xl bg-red-600\" />\n      </div>\n    </div>\n  );\n};\n\nconst TextBlock = ({ fieldHeader, content }) => {\n  return (\n    <div className=\"flex flex-col justify-start items-center\">\n      <p className=\"opacity-40 text-sm\">{fieldHeader}</p>\n      <p className=\"text-md\">{content}</p>\n    </div>\n  );\n};\n","import * as React from \"react\";\n\nfunction HomeIcon(props, svgRef) {\n  return /*#__PURE__*/React.createElement(\"svg\", Object.assign({\n    xmlns: \"http://www.w3.org/2000/svg\",\n    fill: \"none\",\n    viewBox: \"0 0 24 24\",\n    strokeWidth: 2,\n    stroke: \"currentColor\",\n    \"aria-hidden\": \"true\",\n    ref: svgRef\n  }, props), /*#__PURE__*/React.createElement(\"path\", {\n    strokeLinecap: \"round\",\n    strokeLinejoin: \"round\",\n    d: \"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\"\n  }));\n}\n\nconst ForwardRef = React.forwardRef(HomeIcon);\nexport default ForwardRef;","import { List } from \"../../../components\";\nimport { PlusCircleIcon } from \"@heroicons/react/solid\";\nimport { Block } from \"../../../components/admin-blocks\";\nimport { Modal } from \"../../../ui/modal/modal\";\nimport { Dialog } from \"@headlessui/react\";\nimport React, { useEffect, useRef, useState } from \"react\";\nimport { useDispatch, useSelector } from \"react-redux\";\nimport { HomeIcon } from \"@heroicons/react/outline\";\nimport { Datalist } from \"../../../ui/datalist/datalist\";\nimport { publicRequest } from \"../../../api/requestMethods\";\nimport { toast } from \"react-toastify\";\n\nexport const AdminAddClinic = () => {\n  const [isOpen, setIsOpen] = useState(false);\n  const dispatch = useDispatch();\n  const cancelButtonRef = useRef(null);\n  const [city, setCity] = useState([]);\n  const { clinics } = useSelector(({ clinic }) => clinic);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n    let cityId;\n    city.find((item) => {\n      if (item.name === cityRef.current.value) {\n        cityId = item.id;\n      }\n    });\n    const data = {\n      // img: imgRef.current.files[0],\n      name: nameRef.current.value,\n      phone: parseInt(phoneRef.current.value),\n      address: addressRef.current.value,\n      city: parseInt(cityId),\n    };\n    console.log(data);\n\n    try {\n      await publicRequest.post(\"/api/v1/hospital/add\", data, {\n        headers: {\n          Authorization: \"Bearer \" + localStorage.getItem(\"token\"),\n        },\n      });\n    } catch (e) {\n      console.log(e);\n    }\n    // dispatch(getAllFeedbacks(id));\n\n    setIsOpen(false);\n  };\n\n  const imgRef = useRef();\n  const nameRef = useRef();\n  const phoneRef = useRef();\n  const addressRef = useRef();\n  const cityRef = useRef();\n\n  const modalUI = [\n    {\n      id: \"name\",\n      ref: nameRef,\n      name: \"Name\",\n      type: \"text\",\n    },\n    {\n      id: \"phone\",\n      ref: phoneRef,\n      name: \"Phone\",\n      type: \"text\",\n    },\n    {\n      id: \"address\",\n      ref: addressRef,\n      name: \"Address\",\n      type: \"text\",\n    },\n    {\n      id: \"city\",\n      ref: cityRef,\n      name: \"City\",\n      type: \"datalist\",\n    },\n  ];\n\n  useEffect(() => {\n    fetch().then();\n  }, []);\n\n  async function fetch() {\n    try {\n      const responseCity = await publicRequest(\"/api/v1/city/get-all\");\n      setCity(responseCity.data);\n    } catch (e) {\n      if (e.message) {\n        toast(e.message, {\n          type: \"error\",\n          theme: \"light\",\n        });\n      }\n    }\n  }\n\n  return (\n    <List\n      styleList=\"rounded-xl w-full\"\n      header={\n        <div className=\"flex flex-row justify-between\">\n          <h3 className=\"font-medium text-xl\">Hospital</h3>\n          <div\n            onClick={() => setIsOpen(true)}\n            className=\"flex cursor-pointer flex-row justify-between items-center space-x-5\"\n          >\n            <PlusCircleIcon className=\"w-7 text-[#3A57E8]\" />\n            <p className=\"font-bold text-lg text-[#3A57E8]\">Add new hospital</p>\n          </div>\n        </div>\n      }\n    >\n      {clinics.map((clinic) => (\n        <Block\n          heading1=\"Name\"\n          heading1Content={clinic.name}\n          heading2=\"Address\"\n          heading2Content={`${clinic.address}, ${clinic.city.name}`}\n          heading3=\"Phone\"\n          heading3Content={clinic.phone}\n        />\n      ))}\n      <Modal setIsOpen={setIsOpen} isOpen={isOpen} handleSubmit={handleSubmit}>\n        <div>\n          <div className=\"mx-auto flex items-center justify-center h-12 w-12 rounded-full bg-green-100\">\n            <HomeIcon className=\"h-6 w-6 text-green-600\" aria-hidden=\"true\" />\n          </div>\n          <div className=\"mt-3 text-center sm:mt-5\">\n            <Dialog.Title\n              as=\"h3\"\n              className=\"text-lg leading-6 font-medium text-gray-900\"\n            >\n              Add new Hospital\n            </Dialog.Title>\n            <div className=\"mt-2 flex flex-col space-y-4\">\n              <label\n                htmlFor=\"img\"\n                className=\"flex flex-col text-gray-500 text-md items-start\"\n              >\n                Photo :\n                <input\n                  type=\"file\"\n                  id=\"img\"\n                  ref={imgRef}\n                  className=\"w-full rounded-md\"\n                />\n              </label>\n              {modalUI.map((item) => (\n                <label\n                  htmlFor={item.id}\n                  className=\"flex flex-col text-gray-500 text-md items-start\"\n                >\n                  {item.name} :\n                  <input\n                    ref={item.ref}\n                    type={item.type}\n                    id={item.id}\n                    autoComplete=\"off\"\n                    list={item.type === \"datalist\" ? `${item.id}_list` : null}\n                    className=\"w-full rounded-md min-h-[50px] border-2 border-gray-300\"\n                  />\n                  <Datalist data={city} id=\"city_list\" />\n                </label>\n              ))}\n            </div>\n          </div>\n        </div>\n        <div className=\"mt-5 sm:mt-6 sm:grid sm:grid-cols-2 sm:gap-3 sm:grid-flow-row-dense\">\n          <button\n            type=\"submit\"\n            className=\"w-full inline-flex justify-center rounded-md border border-transparent shadow-sm px-4 py-2 bg-indigo-600 text-base font-medium text-white hover:bg-indigo-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:col-start-2 sm:text-sm\"\n          >\n            Submit\n          </button>\n          <button\n            type=\"button\"\n            className=\"mt-3 w-full inline-flex justify-center rounded-md border border-gray-300 shadow-sm px-4 py-2 bg-white text-base font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500 sm:mt-0 sm:col-start-1 sm:text-sm\"\n            onClick={() => setIsOpen(false)}\n            ref={cancelButtonRef}\n          >\n            Cancel\n          </button>\n        </div>\n      </Modal>\n    </List>\n  );\n};\n","export const Datalist = ({ id, data }) => {\n  console.log(data);\n  return (\n    <datalist id={id}>\n      {data &&\n        data.map((option) => <option key={option.id} value={option.name} />)}\n    </datalist>\n  );\n};\n"],"names":["Block","heading1","heading1Content","heading2","heading2Content","heading3","heading3Content","className","TextBlock","fieldHeader","content","name","style","React","props","svgRef","Object","assign","xmlns","fill","viewBox","strokeWidth","stroke","ref","strokeLinecap","strokeLinejoin","d","AdminAddClinic","useState","isOpen","setIsOpen","cancelButtonRef","useDispatch","useRef","city","setCity","clinics","useSelector","clinic","handleSubmit","e","preventDefault","find","item","cityRef","current","value","cityId","id","data","nameRef","phone","parseInt","phoneRef","address","addressRef","console","log","publicRequest","headers","Authorization","localStorage","getItem","imgRef","modalUI","type","responseCity","message","toast","theme","useEffect","fetch","then","styleList","header","onClick","PlusCircleIcon","map","as","htmlFor","autoComplete","list","Datalist","option"],"sourceRoot":""}